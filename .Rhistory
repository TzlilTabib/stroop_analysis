rm(list = ls())
library(tidyr)
library(dplyr)
library(readxl)
library(writexl)
library(effectsize)
library(ggplot2)
# Combining data
cohort_1 <- read_excel('./cohort_1_long_NoOutliers.xlsx')
library(dplyr)
library(ggplot2)
library(ggdist)
library(lme4)
load('./filtered_data.rdata')
# R course for beginners
# Week 7 part 1
# Assignment by Tzlil Tabib, id 208744755
library(dplyr)
### PREPARING RAW DATA FROM COLLECTED DATA -------------------------------------
# Combining subjects' files to one data frame
files_names <- dir("stroop_data", full.names = TRUE)
df <- data.frame()
for (file in files_names) {
temp_data <- read.csv(file)
df <- rbind(df, temp_data)}
# Organizing data
df <- df |>
mutate(
task        = ifelse(grepl("word_reading", condition), "word_reading", "ink_naming"),
congruency  = ifelse(grepl("incong", condition), "incong", "cong"),
accuracy    = as.numeric(correct_response == participant_response)) |>
select(subject, task, congruency, block, trial, accuracy, rt) |>
mutate(
subject        = as.factor(subject),
task           = factor(task, levels = c("word_reading", "ink_naming"), ordered = TRUE),
congruency     = factor(congruency, levels = c("cong", "incong"), ordered = TRUE),
accuracy       = factor(accuracy, levels = c(0, 1), labels = c("inaccurate", "accurate")),
block          = as.factor(block),
trial          = as.numeric(trial),
rt             = as.numeric(rt))
setwd("C:/Users/tzlil/OneDrive/Documents/Masters/קורסים/היכרות עם R/Projects/week 7")
# R course for beginners
# Week 7 part 1
# Assignment by Tzlil Tabib, id 208744755
library(dplyr)
### PREPARING RAW DATA FROM COLLECTED DATA -------------------------------------
# Combining subjects' files to one data frame
files_names <- dir("stroop_data", full.names = TRUE)
df <- data.frame()
for (file in files_names) {
temp_data <- read.csv(file)
df <- rbind(df, temp_data)}
# Organizing data
df <- df |>
mutate(
task        = ifelse(grepl("word_reading", condition), "word_reading", "ink_naming"),
congruency  = ifelse(grepl("incong", condition), "incong", "cong"),
accuracy    = as.numeric(correct_response == participant_response)) |>
select(subject, task, congruency, block, trial, accuracy, rt) |>
mutate(
subject        = as.factor(subject),
task           = factor(task, levels = c("word_reading", "ink_naming"), ordered = TRUE),
congruency     = factor(congruency, levels = c("cong", "incong"), ordered = TRUE),
accuracy       = factor(accuracy, levels = c(0, 1), labels = c("inaccurate", "accurate")),
block          = as.factor(block),
trial          = as.numeric(trial),
rt             = as.numeric(rt))
# Saving raw data
save(df, file = './raw_data.rdata')
# R course for beginners
# Week 7 part 2
# Assignment by Tzlil Tabib, id 208744755
library(dplyr)
load('./raw_data.rdata')
# Counting subjects
N = n_distinct(df$subject)
print(paste("N =", N , "subjects"))
### PREPARING FILTERED DATA ----------------------------------------------------
# calculation total number of trials per subject
total_trials <- df |>
group_by(subject) |>
summarize(total_trials = n())
# Excluding NA trials and (rt < 300 or rt > 3000)
df_filtered <- df |>
na.omit() |>
filter(rt > 300 & rt < 3000)
# calculating remaining number and percentage of trials per subject
remaining_trials <- df_filtered |>
group_by(subject) |>
summarize(remaining_trials = n())
trial_summary <- cbind(total_trials, remaining_trials = (remaining_trials$remaining_trials))
trial_summary <- trial_summary |>
mutate(remaining_trials_per = remaining_trials/total_trials * 100)
trial_summary |>
summarize(
mean_remaining_trials_per = mean(remaining_trials_per),
sd_remaining_trials_per   = sd(remaining_trials_per))
# Saving filtered data
save(df_filtered, file = './filtered_data.rdata')
library(dplyr)
library(ggplot2)
library(ggdist)
library(lme4)
load('./filtered_data.rdata')
### DESCRIPTIVE STATISTICS -----------------------------------------------------
descriptives <- df_filtered |>
group_by(congruency, task, accuracy) |>
summarise(
mean_rt       = mean(rt),
sd_rt         = sd(rt))
# Descriptive plot for reaction time by congruency and task
ggplot(df_filtered, aes(x = congruency, y = rt, fill = accuracy, color = accuracy)) +
stat_halfeye(adjust = 0.5, justification = -0.1, .width = 0, alpha = 0.4) +
geom_boxplot(width = 0.1, alpha = 0.7) +
geom_jitter(width = 0.1, alpha = 0.4) +
geom_point(data = descriptives, aes(x = congruency, y = mean_rt), size = 4, color = "black") +
facet_wrap(~ task) +
labs(
title = "Raincloud plot of reaction time by congruency and task",
x     = "Congruency",
y     = "Reaction Time (RT)") +
theme_minimal()
library(dplyr)
library(ggplot2)
library(ggdist)
library(lme4)
load('./filtered_data.rdata')
### DESCRIPTIVE STATISTICS -----------------------------------------------------
descriptives <- df_filtered |>
group_by(congruency, task, accuracy) |>
summarise(
mean_rt = mean(rt),
sd_rt   = sd(rt))
# Descriptive plot for reaction time by congruency and task
ggplot(df_filtered, aes(x = congruency, y = rt, fill = accuracy, color = accuracy)) +
stat_halfeye(adjust = 0.5, justification = -0.1, .width = 0, alpha = 0.4) +
geom_boxplot(width = 0.1, alpha = 0.7) +
geom_jitter(width = 0.1, alpha = 0.4) +
geom_point(data = descriptives, aes(x = congruency, y = mean_rt), size = 4, color = "black") +
facet_wrap(~ task) +
labs(
title = "Raincloud plot of reaction time by congruency and task",
x     = "Congruency",
y     = "Reaction Time (RT)") +
theme_minimal()
### DESCRIPTIVE STATISTICS -----------------------------------------------------
descriptives <- df_filtered |>
group_by(congruency, task) |>
summarise(
mean_rt = mean(rt),
sd_rt   = sd(rt))
ggplot(df_summary, aes(x = congruency, y = mean_rt, fill = task)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Mean Reaction Time by Congruency and Task",
x = "Congruency",
y = "Mean Reaction Time (ms)") +
theme_minimal()
ggplot(descriptives, aes(x = congruency, y = mean_rt, fill = task)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Mean Reaction Time by Congruency and Task",
x = "Congruency",
y = "Mean Reaction Time (ms)") +
theme_minimal()
## Accuracy by congruency and task
descriptives <- df_filtered |>
group_by(congruency, task) |>
summarise(
mean_accuracy = mean(accuracy),
sd_accuracy   = sd(accuracy))
## Accuracy by congruency and task
descriptives <- df_filtered |>
group_by(congruency, task) |>
summarise(
n_accurate   = n(accuracy),
n_inaccurate = n(accuracy))
## Accuracy by congruency and task
descriptives <- df_filtered |>
group_by(congruency, task) |>
summarise(
n_accurate   = n(),
n_inaccurate = n())
## Accuracy by congruency and task
descriptives <- df_filtered |>
group_by(congruency, task, accuracy) |>
summarise(
n_accurate   = n(),
n_inaccurate = n())
## Accuracy by congruency and task
descriptives <- df_filtered |>
group_by(congruency, task, accuracy) |>
summarise(
count = n())
### DESCRIPTIVE STATISTICS -----------------------------------------------------
## Reaction time by congruency and task
descriptives_rt <- df_filtered |>
group_by(congruency, task) |>
summarise(
mean_rt = mean(rt),
sd_rt   = sd(rt))
# Descriptive plot for reaction time by congruency and task
ggplot(descriptives, aes(x = congruency, y = mean_rt, fill = task)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Mean Reaction Time by Congruency and Task",
x     = "Congruency",
y     = "Mean Reaction Time (ms)") +
theme_minimal()
# Descriptive plot for reaction time by congruency and task
ggplot(descriptives_rt, aes(x = congruency, y = mean_rt, fill = task)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Mean Reaction Time by Congruency and Task",
x     = "Congruency",
y     = "Mean Reaction Time (ms)") +
theme_minimal()
## Accuracy by congruency and task
descriptives_accuracy <- df_filtered |>
group_by(congruency, task, accuracy) |>
summarise(
count = n())
# Descriptive plot for accuracy by congruency and task
ggplot(descriptives_accuracy, aes(x = congruency, y = mean_rt, fill = task)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Mean Reaction Time by Congruency and Task",
x     = "Congruency",
y     = "Mean Reaction Time (ms)") +
theme_minimal()
View(descriptives_rt)
View(descriptives)
## Accuracy by congruency and task
descriptives_accuracy <- df_filtered |>
group_by(congruency, task) |>
summarise(
n_accurate   = sum(accuracy == "accurate"),
n_inaccurate = sum(accuracy == "inaccurate"))
View(descriptives_rt)
View(descriptives_accuracy)
# Descriptive plot for accuracy by congruency and task
ggplot(descriptives_accuracy, aes(x = congruency, fill = task)) +
geom_bar(stat = "identity", position = "dodge", aes(y = n_accurate)) +
labs(title = "Number of accurate responses",
x     = "Congruency",
y     = "Count of accurate responses") +
theme_minimal()
# Descriptive plot for reaction time by congruency and task
rt_descriptive_figure <-
ggplot(descriptives_rt, aes(x = congruency, y = mean_rt, fill = task)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt), width = 0.2, position = position_dodge(0.9)) +
labs(title = "Mean Reaction Time by Congruency and Task",
x     = "Congruency",
y     = "Mean Reaction Time (ms)") +
theme_minimal()
# Descriptive plot for accuracy by congruency and task
accuracy_descriptive_figure <-
ggplot(descriptives_accuracy, aes(x = congruency, fill = task)) +
geom_bar(stat = "identity", position = "dodge", aes(y = n_accurate)) +
labs(title = "Number of accurate responses",
x     = "Congruency",
y     = "Count of accurate responses") +
theme_minimal()
descriptive_figures <- rt_descriptive_figure + accuracy_descriptive_figure
library(patchwork)
descriptive_figures <- rt_descriptive_figure + accuracy_descriptive_figure
descriptive_figures
# Descriptive plot for reaction time by congruency and task
rt_descriptive_figure <-
ggplot(descriptives_rt, aes(x = congruency, y = mean_rt, fill = task)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt), width = 0.2, position = position_dodge(0.9)) +
labs(title = "Mean Reaction Time by Congruency and Task",
x     = "Congruency",
y     = "Mean reaction time (ms)") +
theme_minimal()
# Descriptive plot for accuracy by congruency and task
accuracy_descriptive_figure <-
ggplot(descriptives_accuracy, aes(x = congruency, fill = task)) +
geom_bar(stat = "identity", position = "dodge", aes(y = n_accurate)) +
labs(title = "Number of Accurate Responses by Congruency and Task",
x     = "Congruency",
y     = "Count of accurate responses") +
theme_minimal()
descriptive_figures <- rt_descriptive_figure + accuracy_descriptive_figure
ggsave("descriptive_figures.png", descriptive_figures, width = 10, height = 8)
ggsave("descriptive_figures.png", descriptive_figures, width = 15, height = 8)
### MIXED EFFECT REGRESSION ----------------------------------------------------
## For predicating reaction time by congruency and type
model <- lmer(rt ~ congruency * task * accuracy + (1 | subject), data = df_filtered)
plot_model(model, type = "pred", terms = c("congruency", "task", "accuracy")) +
labs(title = "Predicted Reaction Time by Congruency, Task, and Accuracy",
x = "Conditions",
y = "Predicted Reaction Time (ms)")
library(sjPlot)
df_filtered$predicted <- predict(model)
ggplot(df_filtered, aes(x = congruency, y = predicted, color = task)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method = "lm", se = TRUE) +
labs(title = "Predicted Reaction Time by Congruency and Task",
x = "Congruency",
y = "Predicted Reaction Time (ms)") +
theme_minimal()
ggplot(df_filtered, aes(x = congruency, y = predicted, color = task)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method = "lm", se = TRUE) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high, fill = group), alpha = 0.2) +
labs(title = "Predicted Reaction Time by Congruency and Task",
x = "Congruency",
y = "Predicted Reaction Time (ms)") +
theme_minimal()
ggplot(df_filtered, aes(x = congruency, y = predicted, color = task)) +
geom_line(size = 1) +
scale_color_manual(values = c("darkblue", "darkred")) +
scale_fill_manual(values = c("lightblue", "lightcoral")) +
labs(title = "Predicted Reaction Time by Congruency and Task",
x = "Congruency",
y = "Predicted Reaction Time (ms)") +
theme_minimal()
ggplot(df_filtered, aes(x = congruency, y = predicted, color = task, fill = congruency)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("darkblue", "darkred")) +
scale_fill_manual(values = c("lightblue", "lightcoral")) +
labs(title = "Predicted Reaction Time by Congruency and Task",
x = "Congruency",
y = "Predicted Reaction Time (ms)") +
theme_minimal()
ggplot(df_filtered, aes(x = congruency, y = predicted, color = task)) +
geom_point(position = position_jitter(width = 0.2, height = 0)) +
geom_smooth(method = "lm", se = TRUE) +
scale_color_manual(values = c("darkblue", "darkred")) +
labs(title = "Predicted Reaction Time by Congruency and Task",
x = "Congruency",
y = "Predicted Reaction Time (ms)") +
theme_minimal()
